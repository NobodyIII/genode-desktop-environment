source ${genode_dir}/repos/libports/run/qt5_common.inc

#
# Build
#

append build_components [qt5_build_components feature]

append build_components {
	app/file_manager_qt
	noux-pkg/coreutils
	server/ram_fs
	server/vfs
}

build $build_components

create_boot_directory

create_qt5_fs_tar_archive "file_manager_qt" "gui"

#
# Generate config
#

append config {
<config>
	<parent-provides>}
append config [qt5_parent_provides feature]
append config {
	</parent-provides>
	<default caps="200"/>
	<default-route>
		<service name="PD">
			<parent diag="yes"/>
		</service>
		<any-service> <parent/> <child name="wm"/> <any-child/> </any-service>
	</default-route>}

append config [qt5_start_nodes feature]

append config {
	<start name="tar_fs">
		<binary name="vfs"/>
		<resource name="RAM" quantum="20M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<vfs>
				<tar name="coreutils.tar"/>
			</vfs>
			<policy label="file_manager_qt -> main" root="/" writeable="no" />
		</config>
	</start>
	<start name="ram_fs">
		<resource name="RAM" quantum="20M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<policy label="file_manager_qt -> ram" root="/" writeable="yes" />
		</config>
	</start>
	<start name="file_manager_qt" caps="1000">
		<resource name="RAM" quantum="100M"/>
		<config>
			<libc stdout="/dev/log" stderr="/dev/log" />
			<vfs>
				<dir name="dev"> <log/> </dir>
				<tar name="qt5_fs_file_manager_qt.tar"/>
			</vfs>
		</config>
		<route>
			<service name="File_system" label="main"> <child name="tar_fs"/> </service>
			<service name="File_system" label="ram"> <child name="ram_fs"/> </service>
			<any-service> <child name="wm"/> <parent/> <any-child/> </any-service>
		</route>
	</start>
}
#append_platform_drv_config

append config {
</config>
}

install_config $config

#
# Boot modules
#

# generic modules
append boot_modules {
	file_manager_qt
	egl.lib.so
	expat.lib.so
	freetype.lib.so
	glapi.lib.so
	ld.lib.so
	libc.lib.so
	libc_pipe.lib.so
	libm.lib.so
	libpng.lib.so
	jpeg.lib.so
	mesa.lib.so
	pcre16.lib.so
	pthread.lib.so
	qt5_component.lib.so
	qt5_core.lib.so
	qt5_gui.lib.so
	qt5_widgets.lib.so
	qt5_scriptclassic.lib.so
	qt5_ui_tools.lib.so
	qt5_xml.lib.so
	zlib.lib.so
	stdcxx.lib.so
	qt5_fs_file_manager_qt.tar
	coreutils.tar
	ram_fs
	vfs
	pcre16.lib.so
	qt5_component.lib.so
}

append boot_modules [qt5_boot_modules feature]

build_boot_image $boot_modules

#
# Execute test
#

# qemu config
append qemu_args " -m 512 "

run_genode_until forever
